/*
Copyright (C) 2010-2014  Le Hoang Quyen (lehoangq@gmail.com)

This program is free software; you can redistribute it and/or
modify it under the terms of the MIT license.  See the file
COPYING.txt included with this distribution for more information.


*/

#include "../common_shader_code.h"

uniform transform {
	float4x3 worldMat;
}: BUFFER[0];

uniform lightView {
	float4x4 lightViewMat;//light camera's view matrix
	float4x4 lightProjMat;//light camera's projection matrix
}: BUFFER[1];

#define HALF_PIXEL_OFFSET 0.5 / 512

struct vOut{
	float4 oPos : POSITION;
	float3 oPosW : TEXCOORD0;//world space position
	float2 oDepth : TEXCOORD1;
	float3 oNormalW: TEXCOORD2;//world space normal
};

//do nothing in other API
float2 offsetPostion(float4 position){
	return position.xy;
}

//offset by half a pixel, because of  the way the texel map to pixel in D3D9.
vs_2_0 vs_3_0 float2 offsetPostion(float4 position){
	return position.xy + float2(-HALF_PIXEL_OFFSET, HALF_PIXEL_OFFSET) * position.w * 2.0;
}


//vertex shader
vOut VS(in vPNIn input){
	vOut output;
	
	float3 posW;
	float4 posH;
	float3 normalW; 
	
	transformWVP(input.iPos, worldMat, lightViewMat, lightProjMat, posW, posH);
	normalW = worldTransformNormal(input.iNormal, worldMat );
	
	//projected position
	output.oPos = posH;
	output.oPos.xy = offsetPostion(output.oPos);//API dependent function
	
	//depth
	output.oDepth = output.oPos.zw;
	
	//world space position
	output.oPosW = posW;
	
	//world space normal
	output.oNormalW = normalW;
	
	return output;
};


uniform material {
	float4 materialDiffuse;
} : BUFFER[2];

uniform lightProperties {
	
	float3 lightPosition;
	float3 lightDirection;
	float4 lightDiffuse;
	float2 lightFalloff_lightPCosHalfAngle;
} : BUFFER[3];

struct pOut{
	float4 depth: COLOR0;//depth
	float4 posW: COLOR1;//world space position
	float4 normalW: COLOR2;//world space normal
	float4 flux: COLOR3;//flux
};

//get normalized depth in range [0..1]
float getNormDepth(float2 clipDepth){
	return clipDepth.x / clipDepth.y;
}

//get normalized depth in range [0..1]. OpenGL version 
glslf float getNormDepth(float2 clipDepth){
	return 0.5 * (clipDepth.x / clipDepth.y) + 0.5;
}

//pixel shader
pOut PS(
	in float4 vPos : POSITION,
	in float3 posW : TEXCOORD0,//world space position
	in float2 depth: TEXCOORD1,//depth in clip space
	in float3 normalW: TEXCOORD2 //world space normal
	)
{
	pOut output;
	
	output.depth = getNormDepth(depth);//get normalized depth in range [0..1]
	//world space position normalized and scaled to a value between 0.0 and 1.0
	output.posW = float4((posW + 10.0) / 20.0, 1.0);
	
	//world space normal scaled to a value between 0.0 and 1.0
	output.normalW = float4((normalW + 1.0)/ 2.0, 0.0);
	
	//calculate flux
	float3 lightVec = normalize(posW - lightPosition);
	float cosLD = dot(lightVec, lightDirection);
	float spot = pow(max(cosLD, 0), lightFalloff_lightPCosHalfAngle.x);
	if (spot < lightFalloff_lightPCosHalfAngle.y)
		//out of light cone
		output.flux = float4(0.0, 0.0, 0.0, 1.0);
	else
		output.flux = spot * lightDiffuse * materialDiffuse / PI;
	
	return output;
}