#include "../common_shader_code.h"
#include "../common_compute_code.h"
#include "common.cshaderh"

#define ENABLE_SPECULAR 0


#if ENABLE_SPECULAR
begin_decl_uniform_buffer(cameraInfos, 0)
{
	float4x3 worldMat;
	float4x4 viewMat;
	float4x4 projMat;
	float4 cameraPos;//camera's world position
};

begin_decl_uniform_buffer(lightProperties, 4)
{
	float3 lightPosition;
	float3 lightDirection;
	float4 lightAmbient;
	float4 lightDiffuse;
	float3 lightFalloff_cosHalfAngle_cosHalfTheta;
	float4 lightSpecular;
};

#endif //#if ENABLE_SPECULAR


begin_decl_uniform_buffer(materialInfos, 2)
{
	SpecularMaterial material[7];
};

begin_decl_uniform_buffer(rsm_samples, 11)
{
	uint2 numVPLs;
};


//input textures
decl_texture2d_with_sampler_2f(depthMatMap, 0);//texture containing depth and material ID
decl_texture2d_with_sampler_4f(worldPosMap, 1);//texture containing world space position
decl_texture2d_with_sampler_4f(worldNormalMap, 2);//texture containing world space normal
decl_texture2d_with_sampler_2f(rsm_depthMatMap, 3);//texture containing VPL's depth and material ID
decl_texture2d_with_sampler_4f(rsm_worldPosMap, 4);//texture containing VPL's world space position
decl_texture2d_with_sampler_4f(rsm_worldNormalMap, 5);//texture containing VPL's world space normal
decl_texture2d_with_sampler_4f(rsm_fluxMap, 6);//texture containing VPL's flux
decl_texture2d_2f(rsm_sampleMap, 7);//texture containing VPL's sampling pattern


/*----------output buffer------------*/
//mutires illumination buffer
decl_structbuffer(uint, illumination_buffer, 0);

/*--------input buffer------------*/
//number of subsplats in final list
decl_structbuffer(uint, numSubsplats, 1);
//final list of subsplats
decl_structbuffer(Subsplat, final_subsplat, 2);

main_proc(GROUP_THREAD_SIZE, 1, 1)
{
	if (globalThreadIdx.x >= numSubsplats[0])
		return;

	Subsplat subsplat = final_subsplat[globalThreadIdx.x];
	uint2 gbuffer_size, coarsest_size, current_size;


	//gbuffer-size
	texture2d_getsize_2f(depthMatMap, gbuffer_size.x, gbuffer_size.y);
	//coarsest size
	coarsest_size = uint2(COARSEST_DIM_SIZE, COARSEST_DIM_SIZE);
	//current level's size
	current_size = coarsest_size << subsplat.level;

	//output coords
	uint2 texel_coords = uint2(subsplat.x, subsplat.y);
	
	//get g-buffer sampling coords
	float2 gbufferCoords =  (float2(texel_coords) + float2( 0.5, 0.5)) / current_size.x;

	//depth and material ID
	float2 depthMat = texture2d_sample_lod_2f(depthMatMap, gbufferCoords, 0.0);
	//material
	SpecularMaterial subsplatMaterial = material[int(depthMat.y)];

	//world position
	float4 worlPos = texture2d_sample_lod_4f(worldPosMap, gbufferCoords, 0.0);

	//world normal
	float4 worldNormal = texture2d_sample_lod_4f(worldNormalMap, gbufferCoords, 0.0);
	worldNormal = normalize(worldNormal);

	float4 total_indirect_illumination = float4(0.0, 0.0, 0.0, 0.0);

	//for each VPL
	_LOOP_ATTRIB_ _UAV_COND_ATTRIB_
	for (uint j = 0; j < numVPLs.y; ++j)
	{
		_LOOP_ATTRIB_ _UAV_COND_ATTRIB_
		for (uint i = 0; i < numVPLs.x; ++i)
		{
			//get sampling coords
			float2 vplSampleCoords = texture2d_read_2f(rsm_sampleMap, uint2(i, j), 0);
		
			//get VPL material
			uint vplMaterialID = uint(texture2d_sample_lod_2f(rsm_depthMatMap, vplSampleCoords, 0.0).y);
			//get VPL position
			float4 vplPos = texture2d_sample_lod_4f(rsm_worldPosMap, vplSampleCoords, 0.0);
			//get VPL normal
			float4 vplNormal = texture2d_sample_lod_4f(rsm_worldNormalMap, vplSampleCoords, 0.0);
			//get VPL flux
			float4 vplFlux = texture2d_sample_lod_4f(rsm_fluxMap, vplSampleCoords, 0.0);

			//normalize normal
			vplNormal.xyz = vplNormal.w * normalize(vplNormal.xyz);

			//VPL's material
			SpecularMaterial vplMaterial = material[vplMaterialID];

			//calculate indirect diffuse illumination
			float3 toVPL = vplPos.xyz - worlPos.xyz;
			float distanceSqr = dot(toVPL, toVPL);
			float distance = sqrt(distanceSqr);
			toVPL = toVPL / distance;

			float pdot = max(dot(toVPL, worldNormal.xyz), 0.0);
			float ldot = max(dot(-toVPL, vplNormal.xyz), 0.0);
			float4 radianceIn = vplFlux * pdot * ldot;

#if ENABLE_SPECULAR
			//calculate perfectly reflected direction of direct light ray
			float3 lightRay = normalize(vplPos.xyz - lightPosition);
			float3 reflectedRay = reflect(lightRay, vplNormal.xyz);

			//calculate specular reflection from vpl to subsplat
			if (length(Material_Specular(vplMaterial)) > 0.0)
			{
				float vplSpotFactor = vplPos.w;//spot factor also stored in position buffer
				float vplSpecFactor = pow(max(dot(reflectedRay, -toVPL), 0.0), Material_SpecularExp(vplMaterial));
				float4 vplSpecular = vplSpecFactor * lightSpecular * Material_Specular(vplMaterial) * vplSpotFactor;

				radianceIn += vplSpecular;
			}
#endif//#if ENABLE_SPECULAR
	
			//reduce radiance over distance
			radianceIn /= (distanceSqr + 1.0);

			//now calculate radiance to eye

			float4 specularToEye = float4(0.0, 0.0, 0.0, 0.0);
#if ENABLE_SPECULAR
			if (length(Material_Specular(subsplatMaterial)) > 0.0)
			{
				float3 toEye = normalize(cameraPos.xyz - worlPos.xyz);
				float3 reflectedVec = reflect(-toVPL, worldNormal.xyz);
				float specFactor = pow(max(dot(reflectedVec, toEye), 0.0), Material_SpecularExp(subsplatMaterial));
				specularToEye = specFactor * radianceIn * Material_Specular(subsplatMaterial);
			}
#endif//#if ENABLE_SPECULAR

			float4 radianceOut = radianceIn * Material_Diffuse(subsplatMaterial) + specularToEye;

			total_indirect_illumination +=  radianceOut ;
		}//for (uint j = 0; j < numVPLs.y; ++j)
	}//for (uint i = 0; i < numVPLs.x; ++i)

	//now write to corresponding texture
	total_indirect_illumination.w = 1.0;//mark as valid texel

	storeSubsplatColor4f(illumination_buffer, subsplat.level, texel_coords, total_indirect_illumination);
}