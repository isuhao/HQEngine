Basic format:
<techniques>
	<technique name="tech1"> <!-- must specify technique name -->
		<pass>
		</pass>
		.
		.
		.
		<pass>
		</pass>
	</technique>
</techniques>

Base Pass format:
	<pass name="pass1"> <!-- must specify pass name -->
		<!-- value is name of texture resource for texture unit 0. 0 can be replaced by any other number. Note that in Direct3D this is the texture unit for pixel shader. In OpenGL, if one texture is bound to multiple texture units, and each units has different sampler state, there will be undefined behavior.
		For the attributes, default values are the first values specified below.
		For example: min_filter="linear/point/anisotropic", means default value is linear.
		border_color attribute is hex color
		-->
		<texture0
			min_filter="linear/point/anisotropic"
			mag_filter="linear/point/anisotropic"
			mipmap_filter="linear/point"
			address_u="wrap/mirror/clamp/border"
			address_v="wrap/mirror/clamp/border"
			max_anisotropy="1"
			border_color="000000"
		>
			resource name
		</texture0> 
		<blend>
			<operator>add/sub/rev sub/</operator> <!-- default is add -->
			<src_factor> <!-- default is one -->
				one/zero/src color/one minus src color/
				src alpha/one minus src alpha
			</src_factor>
			<dest_factor> <!-- default is zero -->
				one/zero/src color/one minus src color/
				src alpha/one minus src alpha
			</dest_factor>
			<alpha_src_factor> <!-- default is the same value as src_factor -->
				one/zero/src color/one minus src color/
				src alpha/one minus src alpha
			</alpha_src_factor>
			<alpha_dest_factor> <!-- default is the same value as dest_factor -->
				one/zero/src color/one minus src color/
				src alpha/one minus src alpha
			</alpha_dest_factor>
		</blend>
		<stencil>
			<read_mask>ffffffff</read_mask> <!-- hex value -->
			<write_mask>ffffffff</write_mask> <!-- hex value -->
			<reference_value>0</reference_value> <!-- hex value -->
			<fail_op>keep/zero/replace/incre/decre/incre wrap/decre wrap</fail_op> <!-- default is keep -->
			<depth_fail_op>keep/zero/replace/incre/decre/incre wrap/decre wrap</depth_fail_op> <!-- default is keep -->
			<pass_op>keep/zero/replace/incre/decre/incre wrap/decre wrap</pass_op> <!-- default is keep -->
			<compare_func>always/never/less/equal/less or equal/greater/greater or equal/not equal</conpare_func> <!-- default is always -->
			
			<ccw_fail_op>keep/zero/replace/incre/decre/incre wrap/decre wrap</ccw_fail_op> <!-- default is the same value as fail_op -->
			<ccw_depth_fail_op>keep/zero/replace/incre/decre/incre wrap/decre wrap</ccw_depth_fail_op> <!-- default is the same value as depth_fail_op -->
			<ccw_pass_op>keep/zero/replace/incre/decre/incre wrap/decre wrap</ccw_pass_op> <!-- default is the same value as pass_op -->
			<ccw_compare_func>always/never/less/equal/less or equal/greater/greater or equal/not equal</ccw_conpare_func> <!-- default is the same value as compare_func -->
			
		</stencil>
		<depth>full/read only/write only/none</depth> <!-- default is none -->
		<cull>none/cw/ccw</cull>  <!-- default is none -->
		
		<vertex_shader>shader resource name</vertex_shader>
		<pixel_shader>shader resource name</pixel_shader>
		<geometry_shader>shader resource name</geometry_shader>
		
		<custom_targets> <!-- if not specified, default render target is used -->
			<target0 cube_face="+x"> texture resource name </target0> <!-- cube_face can be "(+/-)(x/y/z)". default is "+x" -->
			<depth_stencil_buffer_format> <!-- default is none -->
				none/d24s8/d16/s8/d32
			</depth_stencil_buffer_format>
		</custom targets>
	</pass>