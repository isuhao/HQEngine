
#pragma pack_matrix(row_major)

struct vOut
{
	float4 position : POSITION;
	float2 texcoord : TEXCOORD0;
	float4 color : COLOR;
	float psize : PSIZE;
};

struct vOut2
{
	float4 position : POSITION;
	float2 texcoord : TEXCOORD0;
	float4 color : COLOR;
};

struct vIn
{
	float3 position : VPOSITION;
	float blendWeight: VBLENDWEIGHT;
	float4 blendIndices: VBLENDINDICES;
	float4 normal : VNORMAL;
	float2 texcoord0  : VTEXCOORD0;
};

float3 mulMatrix3x4(float3x4 mat, float4 v)
{
	float3 re;
	re.x = dot(v , mat[0]);
	re.y = dot(v , mat[1]);
	re.z = dot(v , mat[2]);
	
	return re;
}


#if 1
uniform cbuffer {
	 float3x4 rotation;
	float4x4 viewProj;
	float3x4 boneMatrices[36];
} : BUFFER10;
#else
	 float3x4 rotation;
	float4x4 viewProj;
	float3x4 boneMatrices[36];
#endif

vOut VS(uniform sampler2D texture0 : TEXUNIT3,
	in vIn input)
{
	vOut output;
	if (TEXTURE_COLOR)
		output.color = tex2Dlod(texture0 , float4(input.texcoord0 , 0.0 , 0.0));
	else
		output.color = float4(1,1,1,1);
	
	float2 blendWeight = float2(input.blendWeight, 1.0 - input.blendWeight);
	float4 blendIndices = input.blendIndices;
		
	output.texcoord = input.texcoord0 ;
	output.position.w = 1.0;
	float4 pos = float4(input.position.xyz , 1.0);
	output.position.xyz = blendWeight.x * mulMatrix3x4(boneMatrices[blendIndices.x] , pos ) +
						  blendWeight.y * mulMatrix3x4(boneMatrices[blendIndices.y] , pos )
						;

	
	output.position.xyz = mulMatrix3x4(rotation, output.position);

	output.position = mul(output.position , viewProj);
	return output;
}



uniform cbuffer {
	float3x4 rotation2;
	float4x4 viewProj2;
} : BUFFER[11];

vs_4_0 vs_5_0 vOut2 VS(uniform sampler2D texture0 : TEXUNIT3,
	in vIn input)
{
	vOut2 output;
	if (TEXTURE_COLOR)
		output.color = tex2Dlod(texture0 , float4(input.texcoord0 , 0.0 , 0.0));
	else
		output.color = float4(1,1,1,1);
	output.texcoord = input.texcoord0 ;
	float hlslv = 10;
	output.position.w = hlslv;
	float4 pos = float4(input.position.xyz , 1.0);
	output.position.x = dot(pos , rotation2[0]);
	output.position.y = dot(pos , rotation2[1]);

	hlslv +=  rotation2[1];
	output.position.z = dot(pos , rotation2[2]);
	output.position = hlslv * mul(output.position , viewProj2);
	return output;
}




uniform sampler2D texture1 : TEXUNIT0;
float4 PS(in float2 texcoord  : TEXCOORD0  , 
	in float4 color : COLOR) : COLOR
{
	return tex2D ( texture1 , texcoord) * color;
}

ps_4_0 float4 PS(in float4 position : POSITION,
	in float2 texcoord  : TEXCOORD0  , 
	in float4 color : COLOR ) : COLOR
{
	return tex2D ( texture1 , texcoord) * color;
}