//uniform sampler2D texture0 TEXUNIT99;
/*agaba				gfdllf *
asdgdg
*/
/*#define TEX 1


#define VTEXUNIT3
#define VTEXCOORD6
#define VCOLOR
#define VPOSITION
#define VPSIZE
#define TEXUNIT3
*/


#ifdef UNIFORM_BUFFER


#	ifdef HQEXT_GLSL_ES
uniform ubuffer10
{
	vec4 rotation[3];
	mat4 viewProj;
	vec4 boneMatrices[108];
};
#	else
#	extension GL_EXT_gpu_shader4 : enable
#	extension GL_EXT_bindable_uniform : enable
#	extension GL_ARB_uniform_buffer_object : enable
//#extension GL_EXT_texture_buffer_object : enable

layout(std140) uniform;

uniform ubuffer10
{
	mat3x4 rotation;
	mat4 viewProj;
	mat3x4 boneMatrices[36];
};
#	endif

//#ifdef UNIFORM_BUFFER
#elif defined TEXTURE_BUFFER

#	if __VERSION__ < 140
#		extension GL_EXT_gpu_shader4 : enable
#	endif

uniform samplerBuffer textureBuffer TEXUNIT11;

//#elif defined TEXTURE_BUFFER
#else

#	ifdef HQEXT_GLSL_ES
uniform vec4 rotation[3];
uniform vec4 boneMatrices[36 * 3];
#	else
uniform mat3x4 rotation;
uniform mat3x4 boneMatrices[36];
#	endif
uniform mat4 viewProj;

#endif



uniform sampler2D texture0 TEXUNIT3;

attribute vec3 position VPOSITION;
attribute vec3 normal VNORMAL;
attribute vec2 texcoord0 VTEXCOORD0;
attribute float	blendWeight VBLENDWEIGHT;
attribute vec4 blendIndices VBLENDINDICES;

#ifdef HQEXT_GLSL_ES
varying highp vec4 color;
varying mediump vec2 texcoord;
#else
varying vec4 color;
varying vec2 texcoord;
#endif

#ifdef HQEXT_GLSL_ES
vec3 mulMatrix3x4Bone(int index, vec4 v)
{
	vec4 mat[3];
	mat[0] = boneMatrices[3 * index];
	mat[1] = boneMatrices[3 * index + 1];
	mat[2] = boneMatrices[3 * index + 2];
#else
vec3 mulMatrix3x4(mat3x4 mat, vec4 v)
{
#endif

	vec3 re;
	re.x = dot(v , mat[0]);
	re.y = dot(v , mat[1]);
	re.z = dot(v , mat[2]);
	
	return re;
	
	//return mul(v, mat);
}

void main()
{
#if TEXTURE_COLOR 
		color = texture2DLod(texture0 , texcoord0 , 0.0) ;
#else
		color = vec4(1,1,1,1);
#endif
#ifdef TEXTURE_BUFFER
	mat3x4 rotation;
	mat4 viewProj;
		
	for (int i = 0 ; i < 3 ; ++i)
	{
		rotation[i].xyzw = texelFetch (textureBuffer, i ).xyzw;
		//rotation[i].x = texelFetch (textureBuffer, 4 * i ).x;
		//rotation[i].y = texelFetch (textureBuffer, 4 * i  + 1).x;
		//rotation[i].z = texelFetch (textureBuffer, 4 * i  + 2).x;
		//rotation[i].w = texelFetch (textureBuffer, 4 * i  + 3).x;
	}
	
	for (int i = 0 ; i < 4 ; ++i)
	{
		viewProj[i].xyzw = texelFetch (textureBuffer, i + 3).xyzw;
		//viewProj[i].x = texelFetch (textureBuffer, 4 * i + 12).x;
		//viewProj[i].y = texelFetch (textureBuffer, 4 * i + 13).x;
		//viewProj[i].z = texelFetch (textureBuffer, 4 * i + 14).x;
		//viewProj[i].w = texelFetch (textureBuffer, 4 * i + 15).x;
	}
#endif
	
	texcoord = texcoord0;
	vec4 pos = vec4(position , 1.0);
#ifdef ORIGIN
	gl_Position = vec4( 0.0 , 0.0 , 0.0, 1.0);
	gl_PointSize = 100.0;
#else
	
	vec2 blendWeights = vec2(blendWeight, 1.0 - blendWeight);
	ivec4 blendIndicesI = ivec4(blendIndices.x, blendIndices.y, blendIndices.z, blendIndices.w);
	

#ifdef HQEXT_GLSL_ES
	pos.xyz = blendWeights.x * mulMatrix3x4Bone(blendIndicesI.x , pos ) +
						  blendWeights.y * mulMatrix3x4Bone(blendIndicesI.y , pos )
						;
						
	gl_Position.x = dot (pos , rotation[0]);
	gl_Position.y = dot (pos , rotation[1]);
	gl_Position.z = dot (pos , rotation[2]);
#else
	
	pos.xyz = blendWeights.x * mulMatrix3x4(boneMatrices[blendIndicesI.x] , pos ) +
						  blendWeights.y * mulMatrix3x4(boneMatrices[blendIndicesI.y] , pos )
						;
						
	gl_Position.xyz = pos * rotation;
#endif
	gl_Position.w = 1.0;
	
	gl_Position = viewProj * gl_Position;
	
	
#endif
}
 
